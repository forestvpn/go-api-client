// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DeviceEvent device event
//
// swagger:model DeviceEvent
type DeviceEvent struct {

	// action
	// Enum: [create update delete update_ports]
	Action string `json:"action,omitempty"`

	// device
	Device *Device `json:"device,omitempty"`
}

// Validate validates this device event
func (m *DeviceEvent) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAction(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDevice(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var deviceEventTypeActionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["create","update","delete","update_ports"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		deviceEventTypeActionPropEnum = append(deviceEventTypeActionPropEnum, v)
	}
}

const (

	// DeviceEventActionCreate captures enum value "create"
	DeviceEventActionCreate string = "create"

	// DeviceEventActionUpdate captures enum value "update"
	DeviceEventActionUpdate string = "update"

	// DeviceEventActionDelete captures enum value "delete"
	DeviceEventActionDelete string = "delete"

	// DeviceEventActionUpdatePorts captures enum value "update_ports"
	DeviceEventActionUpdatePorts string = "update_ports"
)

// prop value enum
func (m *DeviceEvent) validateActionEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, deviceEventTypeActionPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *DeviceEvent) validateAction(formats strfmt.Registry) error {
	if swag.IsZero(m.Action) { // not required
		return nil
	}

	// value enum
	if err := m.validateActionEnum("action", "body", m.Action); err != nil {
		return err
	}

	return nil
}

func (m *DeviceEvent) validateDevice(formats strfmt.Registry) error {
	if swag.IsZero(m.Device) { // not required
		return nil
	}

	if m.Device != nil {
		if err := m.Device.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("device")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this device event based on the context it is used
func (m *DeviceEvent) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDevice(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DeviceEvent) contextValidateDevice(ctx context.Context, formats strfmt.Registry) error {

	if m.Device != nil {
		if err := m.Device.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("device")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DeviceEvent) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DeviceEvent) UnmarshalBinary(b []byte) error {
	var res DeviceEvent
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
