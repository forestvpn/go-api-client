// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// WireGuard wire guard
//
// swagger:model WireGuard
type WireGuard struct {

	// peers
	Peers []*WireGuardPeer `json:"peers"`

	// priv key
	PrivKey WireGuardKey `json:"priv_key,omitempty"`

	// pub key
	PubKey WireGuardKey `json:"pub_key,omitempty"`
}

// Validate validates this wire guard
func (m *WireGuard) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePeers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrivKey(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePubKey(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WireGuard) validatePeers(formats strfmt.Registry) error {
	if swag.IsZero(m.Peers) { // not required
		return nil
	}

	for i := 0; i < len(m.Peers); i++ {
		if swag.IsZero(m.Peers[i]) { // not required
			continue
		}

		if m.Peers[i] != nil {
			if err := m.Peers[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("peers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *WireGuard) validatePrivKey(formats strfmt.Registry) error {
	if swag.IsZero(m.PrivKey) { // not required
		return nil
	}

	if err := m.PrivKey.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("priv_key")
		}
		return err
	}

	return nil
}

func (m *WireGuard) validatePubKey(formats strfmt.Registry) error {
	if swag.IsZero(m.PubKey) { // not required
		return nil
	}

	if err := m.PubKey.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("pub_key")
		}
		return err
	}

	return nil
}

// ContextValidate validate this wire guard based on the context it is used
func (m *WireGuard) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePeers(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePrivKey(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePubKey(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WireGuard) contextValidatePeers(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Peers); i++ {

		if m.Peers[i] != nil {
			if err := m.Peers[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("peers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *WireGuard) contextValidatePrivKey(ctx context.Context, formats strfmt.Registry) error {

	if err := m.PrivKey.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("priv_key")
		}
		return err
	}

	return nil
}

func (m *WireGuard) contextValidatePubKey(ctx context.Context, formats strfmt.Registry) error {

	if err := m.PubKey.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("pub_key")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *WireGuard) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WireGuard) UnmarshalBinary(b []byte) error {
	var res WireGuard
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
